// generated by Textmapper; DO NOT EDIT

import * as listener from './listener';

export type Selector = (nt : listener.NodeType) => boolean;

export const Any : Selector = (nt : listener.NodeType) => true;
export const AbortBatchStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AbortBatchStmt;
export const AddColumnAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AddColumnAction;
export const AddConstraintAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AddConstraintAction;
export const AddSubEntityAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AddSubEntityAction;
export const AddTTLAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AddTTLAction;
export const Alias : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Alias;
export const AlterColumnDropDefaultAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AlterColumnDropDefaultAction;
export const AlterColumnDropNotNullAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AlterColumnDropNotNullAction;
export const AlterColumnOptionsAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AlterColumnOptionsAction;
export const AlterColumnSetDefaultAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AlterColumnSetDefaultAction;
export const AlterColumnTypeAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AlterColumnTypeAction;
export const AlterConstraintEnforcementAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AlterConstraintEnforcementAction;
export const AlterConstraintSetOptionsAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AlterConstraintSetOptionsAction;
export const AlterStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AlterStmt;
export const AlterSubEntityAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AlterSubEntityAction;
export const AnalyzeStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AnalyzeStmt;
export const ArrayColumnSchema : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ArrayColumnSchema;
export const ArrayConstructor : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ArrayConstructor;
export const ArraySubscriptExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ArraySubscriptExpr;
export const ArrayType : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ArrayType;
export const AssertStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AssertStmt;
export const AuxLoadStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.AuxLoadStmt;
export const BeginEndBlockStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.BeginEndBlockStmt;
export const BeginStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.BeginStmt;
export const BetweenExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.BetweenExpr;
export const BinaryExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.BinaryExpr;
export const BracedConstructor : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.BracedConstructor;
export const BracedConstructorField : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.BracedConstructorField;
export const BracedNewConstructor : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.BracedNewConstructor;
export const BreakStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.BreakStmt;
export const CallName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CallName;
export const CallStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CallStmt;
export const CaseExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CaseExpr;
export const CaseStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CaseStmt;
export const CastExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CastExpr;
export const CheckConstraint : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CheckConstraint;
export const ClampedBetweenMod : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ClampedBetweenMod;
export const CloneDataSource : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CloneDataSource;
export const CloneDataStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CloneDataStmt;
export const Collate : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Collate;
export const ColumnDefinition : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ColumnDefinition;
export const ColumnWithOptions : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ColumnWithOptions;
export const CommitStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CommitStmt;
export const ConnectionClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ConnectionClause;
export const ConstName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ConstName;
export const ContinueStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ContinueStmt;
export const CreateConstStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateConstStmt;
export const CreateDatabaseStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateDatabaseStmt;
export const CreateEntityStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateEntityStmt;
export const CreateExternalTableFuncStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateExternalTableFuncStmt;
export const CreateExternalTableStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateExternalTableStmt;
export const CreateFuncStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateFuncStmt;
export const CreateIndexStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateIndexStmt;
export const CreateModelStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateModelStmt;
export const CreatePrivilegeRestrictionStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreatePrivilegeRestrictionStmt;
export const CreateProcedureStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateProcedureStmt;
export const CreateRowAccessPolicyStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateRowAccessPolicyStmt;
export const CreateSchemaStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateSchemaStmt;
export const CreateSnapshotTableStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateSnapshotTableStmt;
export const CreateTableFuncStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateTableFuncStmt;
export const CreateTableStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateTableStmt;
export const CreateViewStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.CreateViewStmt;
export const Cube : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Cube;
export const DatabaseName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DatabaseName;
export const DeclareStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DeclareStmt;
export const DefaultLiteral : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DefaultLiteral;
export const DefineMacroStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DefineMacroStmt;
export const DefineTableStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DefineTableStmt;
export const DeleteStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DeleteStmt;
export const DescribeStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DescribeStmt;
export const DropAllRowAccessPoliciesStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DropAllRowAccessPoliciesStmt;
export const DropColumnAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DropColumnAction;
export const DropConstraintAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DropConstraintAction;
export const DropPrimaryKeyAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DropPrimaryKeyAction;
export const DropStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DropStmt;
export const DropSubEntityAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DropSubEntityAction;
export const DropTTLAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.DropTTLAction;
export const ElseExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ElseExpr;
export const ElseIfClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ElseIfClause;
export const ExecuteImmediateStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ExecuteImmediateStmt;
export const ExplainStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ExplainStmt;
export const ExportDataStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ExportDataStmt;
export const ExportModelStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ExportModelStmt;
export const ExprID : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ExprID;
export const ExprParensPath : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ExprParensPath;
export const ExternalTableName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ExternalTableName;
export const ExtractExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ExtractExpr;
export const File : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.File;
export const ForInStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ForInStmt;
export const ForeignKey : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ForeignKey;
export const ForeignKeyColumnAttribute : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ForeignKeyColumnAttribute;
export const FormatClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.FormatClause;
export const FromClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.FromClause;
export const FromQuery : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.FromQuery;
export const FuncBody : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.FuncBody;
export const FuncCallExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.FuncCallExpr;
export const FuncDecl : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.FuncDecl;
export const FuncName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.FuncName;
export const FuncParam : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.FuncParam;
export const FuncParams : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.FuncParams;
export const GeneratedColumnInfo : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GeneratedColumnInfo;
export const GrantStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GrantStmt;
export const GraphElementLabel : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GraphElementLabel;
export const GraphLabelFilter : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GraphLabelFilter;
export const GraphLabelOperationAnd : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GraphLabelOperationAnd;
export const GraphLabelOperationNot : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GraphLabelOperationNot;
export const GraphLabelOperationOr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GraphLabelOperationOr;
export const GraphNodePattern : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GraphNodePattern;
export const GraphParensLabelExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GraphParensLabelExpr;
export const GraphTableQuery : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GraphTableQuery;
export const GraphWildcardLabel : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GraphWildcardLabel;
export const GroupBy : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GroupBy;
export const GroupByAll : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GroupByAll;
export const GroupingItem : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GroupingItem;
export const GroupingItemOrder : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GroupingItemOrder;
export const GroupingSet : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GroupingSet;
export const GroupingSetList : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.GroupingSetList;
export const HavingClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.HavingClause;
export const HavingModifier : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.HavingModifier;
export const HiddenColumnAttribute : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.HiddenColumnAttribute;
export const Hint : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Hint;
export const HintedStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.HintedStmt;
export const ID : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ID;
export const IDList : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.IDList;
export const IfStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.IfStmt;
export const ImportPath : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ImportPath;
export const ImportStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ImportStmt;
export const ImportType : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ImportType;
export const InList : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.InList;
export const IndexName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.IndexName;
export const InputOutputClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.InputOutputClause;
export const InsertStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.InsertStmt;
export const InsertStmtPart : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.InsertStmtPart;
export const IntervalExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.IntervalExpr;
export const Into : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Into;
export const Join : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Join;
export const Lambda : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Lambda;
export const LikeExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.LikeExpr;
export const LimitOffset : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.LimitOffset;
export const Literal : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Literal;
export const LoopStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.LoopStmt;
export const MacroBody : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.MacroBody;
export const MacroCall : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.MacroCall;
export const MacroName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.MacroName;
export const MergeStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.MergeStmt;
export const MergeWhenClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.MergeWhenClause;
export const ModelClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ModelClause;
export const ModelName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ModelName;
export const Modifier : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Modifier;
export const ModuleName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ModuleName;
export const ModuleStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ModuleStmt;
export const NamedArg : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.NamedArg;
export const NewConstructor : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.NewConstructor;
export const NewConstructorArg : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.NewConstructorArg;
export const NotNullColumnAttribute : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.NotNullColumnAttribute;
export const OnClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.OnClause;
export const OnOrUsingClauseList : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.OnOrUsingClauseList;
export const Op : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Op;
export const OptionEntry : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.OptionEntry;
export const OrderBy : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.OrderBy;
export const OrderingExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.OrderingExpr;
export const OverClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.OverClause;
export const ParamExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ParamExpr;
export const ParenthesizedJoin : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ParenthesizedJoin;
export const PartitionBy : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PartitionBy;
export const PathExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PathExpr;
export const PipeAggregate : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeAggregate;
export const PipeAs : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeAs;
export const PipeAssert : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeAssert;
export const PipeCall : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeCall;
export const PipeDistinct : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeDistinct;
export const PipeDrop : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeDrop;
export const PipeExtend : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeExtend;
export const PipeJoin : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeJoin;
export const PipeLimitOffset : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeLimitOffset;
export const PipeLog : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeLog;
export const PipeOrderBy : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeOrderBy;
export const PipePivot : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipePivot;
export const PipeRename : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeRename;
export const PipeRenameItem : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeRenameItem;
export const PipeRenameNewName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeRenameNewName;
export const PipeRenameOldName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeRenameOldName;
export const PipeSelect : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeSelect;
export const PipeSet : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeSet;
export const PipeSetItem : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeSetItem;
export const PipeSetOperation : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeSetOperation;
export const PipeStaticDescribe : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeStaticDescribe;
export const PipeTablesample : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeTablesample;
export const PipeUnpivot : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeUnpivot;
export const PipeWhere : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeWhere;
export const PipeWindow : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PipeWindow;
export const PivotClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PivotClause;
export const PivotExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PivotExpr;
export const PivotValue : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PivotValue;
export const PrimaryKey : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PrimaryKey;
export const PrimaryKeyColumnAttribute : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PrimaryKeyColumnAttribute;
export const PrimaryKeyElement : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.PrimaryKeyElement;
export const ProcedureName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ProcedureName;
export const Qualify : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Qualify;
export const Query : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Query;
export const QueryStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.QueryStmt;
export const RaiseStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RaiseStmt;
export const RangeLiteral : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RangeLiteral;
export const RangeType : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RangeType;
export const RenameColumnAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RenameColumnAction;
export const RenameStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RenameStmt;
export const RenameToClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RenameToClause;
export const RepeatStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RepeatStmt;
export const ReplaceFieldsArg : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ReplaceFieldsArg;
export const ReplaceFieldsExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ReplaceFieldsExpr;
export const ReplaceTTLAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ReplaceTTLAction;
export const ReturnStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ReturnStmt;
export const RevokeStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RevokeStmt;
export const RollbackStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RollbackStmt;
export const Rollup : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Rollup;
export const RowAccessPolicyAlterAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RowAccessPolicyAlterAction;
export const RunBatchStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RunBatchStmt;
export const RunID : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RunID;
export const RunParam : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RunParam;
export const RunParamValue : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RunParamValue;
export const RunPath : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RunPath;
export const RunStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.RunStmt;
export const SampleClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SampleClause;
export const Select : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Select;
export const SelectAll : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SelectAll;
export const SelectAs : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SelectAs;
export const SelectColumn : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SelectColumn;
export const SelectDistinct : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SelectDistinct;
export const SelectList : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SelectList;
export const SelectWith : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SelectWith;
export const SetAsAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetAsAction;
export const SetCollateClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetCollateClause;
export const SetOperation : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetOperation;
export const SetOperationAllOrDistinct : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetOperationAllOrDistinct;
export const SetOperationColumnMatchMode : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetOperationColumnMatchMode;
export const SetOperationColumnPropagationMode : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetOperationColumnPropagationMode;
export const SetOperationItem : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetOperationItem;
export const SetOperationMetadata : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetOperationMetadata;
export const SetOperationType : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetOperationType;
export const SetOptionsAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetOptionsAction;
export const SetStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SetStmt;
export const ShowStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ShowStmt;
export const SimpleColumnSchema : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SimpleColumnSchema;
export const SimpleType : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SimpleType;
export const SpannerAlterColumnAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SpannerAlterColumnAction;
export const SpannerSetOnDeleteAction : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SpannerSetOnDeleteAction;
export const SpannerTableOptions : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SpannerTableOptions;
export const Star : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.Star;
export const StarExcept : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StarExcept;
export const StarReplace : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StarReplace;
export const StarReplaceItem : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StarReplaceItem;
export const StartBatchStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StartBatchStmt;
export const StructColumnField : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StructColumnField;
export const StructColumnSchema : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StructColumnSchema;
export const StructConstructorArg : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StructConstructorArg;
export const StructConstructorExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StructConstructorExpr;
export const StructField : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StructField;
export const StructType : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.StructType;
export const SubPipeline : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SubPipeline;
export const SubqueryExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SubqueryExpr;
export const SyntaxProblem : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SyntaxProblem;
export const SystemVarExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.SystemVarExpr;
export const TVF : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TVF;
export const TVFArg : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TVFArg;
export const TVFName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TVFName;
export const TVFSchema : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TVFSchema;
export const TVFSchemaColumn : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TVFSchemaColumn;
export const TableElement : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TableElement;
export const TableName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TableName;
export const TablePathExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TablePathExpr;
export const TablePathExprBase : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TablePathExprBase;
export const TableSubquery : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TableSubquery;
export const TemplatedParamType : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TemplatedParamType;
export const TruncateStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TruncateStmt;
export const TtlClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TtlClause;
export const TypeParam : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.TypeParam;
export const UnaryExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.UnaryExpr;
export const UnnestExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.UnnestExpr;
export const UnnestExprWithOptAliasAndOffset : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.UnnestExprWithOptAliasAndOffset;
export const UnpivotClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.UnpivotClause;
export const UpdateSetValue : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.UpdateSetValue;
export const UpdateStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.UpdateStmt;
export const UsingClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.UsingClause;
export const ViewName : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.ViewName;
export const WhenThenClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WhenThenClause;
export const WhenThenExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WhenThenExpr;
export const WhereClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WhereClause;
export const WhileStmt : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WhileStmt;
export const WindowClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WindowClause;
export const WindowFrame : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WindowFrame;
export const WithClause : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WithClause;
export const WithClauseEntry : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WithClauseEntry;
export const WithExpr : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WithExpr;
export const WithOffset : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.WithOffset;
export const LineComment : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.LineComment;
export const BlockComment : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.BlockComment;
export const InvalidToken : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.InvalidToken;
export const KwMacroArgRef : Selector = (nt : listener.NodeType) : boolean => nt === listener.NodeType.KwMacroArgRef;
